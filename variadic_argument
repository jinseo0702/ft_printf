Variadic Argument
Taking a arbitrarily many arguments.

가변인자란 --> 인자의 개수가 변하는 인자를 말한다. 이 가변인자는 타입의 개수가 정해지지 않는다.
특정 함수를 사용할 때 이러한 가변인자를 사용하고 싶은 경우가 있다.(ex. printf에서 여러가개의 인자를 받아서 출력).
이를 위해 C언어에서는 stdarg.h에 포함된 va_list타입, va_arg, va_strat, va_end함수를 이용해 가변인자를 다룰 수 있다.
먼저 활용 예시를 보도록 하자.
,,,C

#include <stdio.h>
#include <stdarg.h>

void	testit (int i, ...)
{
	va_list argptr;//가변인자를 가르키는 포인터.
	va_start(argptr, i); //가변인자 리스트 포인터를 첫주소로 초기화.

	if (i == 0)
	{
		//int 타입 사이즈 만큼 데이터를 반환하고, 포인터를 sizeof(int)만큼 이동.
		int	n =  va_arg(argptr, int);
		printf("%d\n", n);// 이렇게 되면 n의 값은 4byte인가???(나의 의문)
	}
	else
	{
		// char * type size만큼의 데이터를 반환하고, 포인터를 sizeof(char *) 만큼 이동.
		char	*s =  va_arg(argptr, char *);
		printf("%s\n", s);
	}
	//argptr = NULL 로 가변인자 사용을 끝마침을 표시
	va_end(argptr);
}

,,,

함수에서 두 번째 인자로 사용되는 '...'이 가변 인자 혹은 가변 파라미터라고 불리는 것이다.
매개변수로 아무것도 넘겨주지 않을 수도 있고, 혹은 여러개를 넘겨 줄 수도 있다.

가변인자들은 연속된 메모리 공간에 할당이 되어있다.
따라서 해당 가변인자를 활용하기 위해서 함수의 첫번째 인자의 위치를 알아야한다.(다른 매개변수들과 마찬가지로 함수가 실행되고 스택에 위치).

|----arg0(int)----||char||--------int------|
0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 0x19

Va_list
각 가변 인자의 시작 주소를 가르킬 포인터이다.

amd64아키텍쳐에서는 위와 같은 구조체 배열로 정의 되어 있다.
,,,
       #include <stdarg.h>

       void va_start(va_list ap, last);
       type va_arg(va_list ap, type);
       void va_end(va_list ap);
       void va_copy(va_list dest, va_list src);
,,,

,,,c

va_list Type Declaration
typedef	struct {
	unsigned int	gp_offset;
	unsigned int	fp_offset;
	void *overflow_arg_area;
	void *reg_save_area;
}	va_lsit[1];

,,,

reg_save_area: 레지스터 저장 영역의 시작을 가리킨다.
overflow_arg_area: 스택에 전달된 인수를 가져오는데 사용된다. 스택에 전달된 첫 번째 인수의 주소(있는 경우)로 초기화되고 스택에서 다음 인수의 시작을 가르키도록 항상 업데이트 된다.
gp_offset: reg_save_area에서 다음으로 사용 가능한 범용 인수 레지스터가 저장되는 위치까지 오프셋을 바이트 단위로 보유한다. 모든 인수 레지스터가 소진된 경우 값48(6 * 8)로 설정된다.
fp_offset: reg_save_area에서 다음으로 사용 가능한 부동 소수점 인수 레지스터가 저장되는 위치까지 오프셋을 바이트 단위로 보유 한다. 모든 인수 레지스터가 소진된 경우 값 304(68 +1616)로 설정된다.

va_start
,,,c

#include <stdarg.h>
void	va_start(va_list ap, variable_name);
,,,
ap: va_list 로 만든 포인터.
valriable_name: 가변인자의 첫 번째 인자 바로 앞에 오는 필수 매개 변수의 이름 즉 '...'바로전에 있는 변수명
va_start는 va_list로 만들어진 포인터에게 고정인자(variable_name)의 주소를 주소를 가르쳐주어 va_list의 값을 초기화 시켜준다.
|----arg0(int)----||char||--------int------|
0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 0x19
					^------va_lsit ap;

va_end
,,,c

#include <stdarg.h>
void	va_end(va_list arg_ptr);

,,,
va_end는 va_list인 ap의 값을 NULL로 변경한다.
즉, 사용한 가변인자 변수를 끝낼때 사용한다.

va_arg
,,,c

#include <stdarg.h>

var_type va_arg(va_list ap, var_type);

,,,
ap: va_lsit로 만든 포인터.
var_type: int나 long, double과 같은 타입 이름
va_arg는 va_list에 저장된va_type 값을 검색해 반환하고, va_list에서 다음 인수를 가르키도록 va_list의 주소를 이동시켜 다음 인수가 시작되는 위치로 변경시킨다.
즉 특정 가변인자를 가르키고 있는 va_list의 포인터를 다음 가변인자로 이동시키고 기존에 가르키던 값을 var_type으로 캐스팅하여 반환한다.

아래 그림에서 va_list가 va_arg(ap, int)에 의해 다음 가변인자로 이동한 모습이다. 
|----arg0(int)----||char||--------int------|
0x10 0x11 0x12 0x13 0x14 0x15 0x16 0x17 0x18 0x19
						 ^------va_list ap;
var_type의 경우 char, short의 경우 int로, float의 경우 double로 사용하고 형 변환을 해주어야 한다.
ex)
,,,c

char ch = (char) va_arg(ap, int);

,,,

va_copy
,,,c

#include <stdarg.h>

void va_copy(va_list dest, va_list src);

,,,
va_copy는 va_start를 dest에 적용한후 dest를 src의 사본으로 초기화 해준다.

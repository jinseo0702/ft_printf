what is printf????

cspdiuxX% 을 구현 하세용~;

Conversion specifiers
    A character that specifies the type of conversion to be applied.
    The conversion specifiers and their meanings are:

d, i   The int argument is converted to signed decimal notation.
       The precision, if any, gives the minimum number of digits
       that must appear; if the converted value requires fewer
       digits, it is padded on the left with zeros.  The default
       precision is 1.  When 0 is printed with an explicit
       precision 0, the output is empty.

o, u, x, X
       The unsigned int argument is converted to unsigned octal
       (o), unsigned decimal (u), or unsigned hexadecimal (x and
        X) notation.  The letters abcdef are used for x
       conversions; the letters ABCDEF are used for X
       conversions.  The precision, if any, gives the minimum
       number of digits that must appear; if the converted value
       requires fewer digits, it is padded on the left with
       zeros.  The default precision is 1.  When 0 is printed
       with an explicit precision 0, the output is empty.

c      If no l modifier is present, the int argument is converted
       to an unsigned char, and the resulting character is
       written.  If an l modifier is present, the wint_t (wide
       character) argument is converted to a multibyte sequence
       by a call to the wcrtomb(3) function, with a conversion
       state starting in the initial state, and the resulting
       multibyte string is written.

s      If no l modifier is present: the const char * argument is
       expected to be a pointer to an array of character type
       (pointer to a string).  Characters from the array are
       written up to (but not including) a terminating null byte
       ('\0'); if a precision is specified, no more than the
       number specified are written.  If a precision is given, no
       null byte need be present; if the precision is not
       specified, or is greater than the size of the array, the
       array must contain a terminating null byte.

       If an l modifier is present: the const wchar_t * argument
       is expected to be a pointer to an array of wide
       characters.  Wide characters from the array are converted
       to multibyte characters (each by a call to the wcrtomb(3)
       function, with a conversion state starting in the initial
       state before the first wide character), up to and
       including a terminating null wide character.  The
       resulting multibyte characters are written up to (but not
       including) the terminating null byte.  If a precision is
       specified, no more bytes than the number specified are
       written, but no partial multibyte characters are written.
       Note that the precision determines the number of bytes
       written, not the number of wide characters or screen
       positions.  The array must contain a terminating null wide
       character, unless a precision is given and it is so small
       that the number of bytes written exceeds it before the end
       of the array is reached.

p      The void * pointer argument is printed in hexadecimal (as
       if by %#x or %#lx).

%      A '%' is written.  No argument is converted.  The complete
       conversion specification is '%%'.

Conversion specifiers는 변환할 유형을 지정하는 문자입니다.

d, i: int 인수가 부호있는 십진수 표기로 변환됩니다. 정밀도가 있는 경우 변환된 값이 적은 자릿수를 필요로 하는 경우 왼쪽에 0으로 채워집니다. 기본 정밀도는 1입니다. 명시적 정밀도 0으로 0을 인쇄하면 출력이 비어 있습니다.

o, u, x, X: unsigned int 인수가 부호 없는 8진수(o), 부호 없는 10진수(u) 또는 부호 없는 16진수(x 및 X) 표기로 변환됩니다. x 변환에는 abcdef 문자가 사용되고, X 변환에는 ABCDEF 문자가 사용됩니다. 정밀도가 있는 경우 변환된 값이 적은 자릿수를 필요로 하는 경우 왼쪽에 0으로 채워집니다. 기본 정밀도는 1입니다. 명시적 정밀도 0으로 0을 인쇄하면 출력이 비어 있습니다.

c: l 수정자가 없으면 int 인수가 unsigned char로 변환되고 결과 문자가 작성됩니다. l 수정자가 있으면 wint_t (wide character) 인수가 초기 상태에서 시작하는 변환 상태로 wcrtomb(3) 함수를 호출하여 다중 바이트 시퀀스로 변환되고 결과 다중 바이트 문자열이 작성됩니다.

s: l 수정자가 없으면 const char * 인수는 문자 유형의 배열 (문자열의 포인터)을 가리키도록 예상됩니다. 배열의 문자는 종료 널 바이트 ('\0')까지 쓰여지며, 정밀도가 지정된 경우 지정된 수 이상은 쓰여지지 않습니다. 정밀도가 지정된 경우 널 바이트가 있을 필요는 없습니다. 정밀도가 지정되지 않았거나 배열의 크기보다 크면 배열에 종료 널 바이트가 있어야 합니다.

   l 수정자가 있으면 const wchar_t * 인수가 wide 문자의 배열을 가리키도록 예상됩니다. 배열의 wide 문자는 다중 바이트 문자로 변환됩니다 (첫 번째 wide 문자 이전에 초기 상태에서 시작하는 변환 상태로 wcrtomb(3) 함수를 호출함으로써 각각). 다중 바이트 문자는 종료 널 와이드 문자를 포함하여 쓰여집니다. 정밀도가 지정된 경우 지정된 수 이상의 바이트는 쓰여지지 않지만 부분 다중 바이트 문자는 쓰여지지 않습니다. 정밀도는 쓰여진 바이트 수를 결정합니다. 널 와이드 문자가 포함되어 있어야 합니다.

p: void * 포인터 인수는 16진수로 인쇄됩니다.

%: '%'가 작성됩니다. 인수가 변환되지 않습니다. 완전한 변환 사양은 '%%'입니다.

RETURN VALUE         top
       Upon successful return, these functions return the number of
       characters printed (excluding the null byte used to end output to
       strings).

       The functions snprintf() and vsnprintf() do not write more than
       size bytes (including the terminating null byte ('\0')).  If the
       output was truncated due to this limit, then the return value is
       the number of characters (excluding the terminating null byte)
       which would have been written to the final string if enough space
       had been available.  Thus, a return value of size or more means
       that the output was truncated.  (See also below under NOTES.)

       If an output error is encountered, a negative value is returned.

반환 값
성공적인 반환 시, 이러한 함수들은 출력된 문자 수를 반환합니다 (문자열 출력을 끝내는 데 사용되는 널 바이트를 제외한 값).

함수 snprintf() 및 vsnprintf()는 종료 널 바이트 ('\0')를 포함하여 size 바이트 이상을 쓰지 않습니다. 출력이 이 제한으로 인해 잘렸을 경우, 반환 값은 충분한 공간이 있었다면 최종 문자열에 작성될 것으로 예상되는 문자 수 (종료 널 바이트를 제외한)입니다. 따라서 size 이상의 반환 값은 출력이 잘렸음을 의미합니다. (아래 NOTES에서도 참조하십시오.)

출력 오류가 발생하면 음수 값이 반환됩니다.

BUGS         top
       Because sprintf() and vsprintf() assume an arbitrarily long
       string, callers must be careful not to overflow the actual space;
       this is often impossible to assure.  Note that the length of the
       strings produced is locale-dependent and difficult to predict.
       Use snprintf() and vsnprintf() instead (or asprintf(3) and
       vasprintf(3)).

       Code such as printf(foo); often indicates a bug, since foo may
       contain a % character.  If foo comes from untrusted user input,
       it may contain %n, causing the printf() call to write to memory
       and creating a security hole.

버그
sprintf() 및 vsprintf()는 임의로 긴 문자열을 가정하므로 호출자는 실제 공간을 넘어서지 않도록 주의해야 합니다. 이는 종종 보장하기가 불가능합니다. 생성된 문자열의 길이는 로캘에 따라 달라 예측하기가 어렵습니다. 대신 snprintf() 및 vsnprintf() (또는 asprintf(3) 및 vasprintf(3))를 사용하세요.

printf(foo);와 같은 코드는 종종 버그를 나타냅니다. foo에 % 문자가 포함될 수 있기 때문입니다. foo가 신뢰할 수 없는 사용자 입력에서 가져온 경우 printf() 호출이 메모리에 쓰여지고 보안 결함이 생성될 수 있는 %n을 포함할 수 있습니다.
